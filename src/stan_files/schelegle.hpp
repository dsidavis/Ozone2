/*
    OzoneExposure is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OzoneExposure is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with OzoneExposure.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.1

#include <stan/model/model_header.hpp>

namespace model_schelegle_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_schelegle");
    reader.add_event(148, 146, "end", "model_schelegle");
    return reader;
}

Eigen::Matrix<double, Eigen::Dynamic,1>
seq(const int& start,
        const int& end, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 11;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,((1 + end) - start));
        current_statement_begin__ = 12;
        validate_non_negative_index("x", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  x(static_cast<Eigen::VectorXd::Index>(N));
        (void) x;  // dummy to suppress unused var warning

        stan::math::initialize(x, DUMMY_VAR__);
        stan::math::fill(x,DUMMY_VAR__);


        current_statement_begin__ = 13;
        for (int i = 1; i <= N; ++i) {
            current_statement_begin__ = 14;
            stan::model::assign(x, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        ((start + i) - 1), 
                        "assigning variable x");
        }
        current_statement_begin__ = 15;
        return stan::math::promote_scalar<fun_return_scalar_t__>(x);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct seq_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic,1>
    operator()(const int& start,
        const int& end, std::ostream* pstream__) const {
        return seq(start, end, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic,1>
UOS(const T0__& DR,
        const Eigen::Matrix<T1__, Eigen::Dynamic,1>& CumFrDos,
        const T2__& Dos,
        const Eigen::Matrix<T3__, Eigen::Dynamic,1>& t, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 19;
        int n(0);
        (void) n;  // dummy to suppress unused var warning

        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,get_base1(dims(t),1,"dims(t)",1));
        current_statement_begin__ = 20;
        validate_non_negative_index("UOS", "n", n);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  UOS(static_cast<Eigen::VectorXd::Index>(n));
        (void) UOS;  // dummy to suppress unused var warning

        stan::math::initialize(UOS, DUMMY_VAR__);
        stan::math::fill(UOS,DUMMY_VAR__);


        current_statement_begin__ = 21;
        for (int i = 1; i <= n; ++i) {
            current_statement_begin__ = 22;
            stan::model::assign(UOS, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        (DR / (1 + stan::math::exp((-(20) * (get_base1(t,i,"t",1) - (get_base1(t,i,"t",1) / get_base1(CumFrDos,i,"CumFrDos",1))))))), 
                        "assigning variable UOS");
        }
        current_statement_begin__ = 24;
        return stan::math::promote_scalar<fun_return_scalar_t__>(UOS);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct UOS_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type, Eigen::Dynamic,1>
    operator()(const T0__& DR,
        const Eigen::Matrix<T1__, Eigen::Dynamic,1>& CumFrDos,
        const T2__& Dos,
        const Eigen::Matrix<T3__, Eigen::Dynamic,1>& t, std::ostream* pstream__) const {
        return UOS(DR, CumFrDos, Dos, t, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
deltaX(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& uos,
           const T1__& k,
           const T2__& x_prev, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 28;
        int n(0);
        (void) n;  // dummy to suppress unused var warning

        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,get_base1(dims(uos),1,"dims(uos)",1));
        current_statement_begin__ = 29;
        local_scalar_t__ r;
        (void) r;  // dummy to suppress unused var warning

        stan::math::initialize(r, DUMMY_VAR__);
        stan::math::fill(r,DUMMY_VAR__);
        stan::math::assign(r,(1 - stan::math::exp(-(k))));
        current_statement_begin__ = 30;
        validate_non_negative_index("ceoss", "n", n);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ceoss(static_cast<Eigen::VectorXd::Index>(n));
        (void) ceoss;  // dummy to suppress unused var warning

        stan::math::initialize(ceoss, DUMMY_VAR__);
        stan::math::fill(ceoss,DUMMY_VAR__);
        stan::math::assign(ceoss,divide(uos,k));
        current_statement_begin__ = 31;
        validate_non_negative_index("x", "n", n);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  x(static_cast<Eigen::VectorXd::Index>(n));
        (void) x;  // dummy to suppress unused var warning

        stan::math::initialize(x, DUMMY_VAR__);
        stan::math::fill(x,DUMMY_VAR__);
        stan::math::assign(x,rep_vector(0.0,n));


        current_statement_begin__ = 33;
        stan::model::assign(x, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    x_prev, 
                    "assigning variable x");
        current_statement_begin__ = 35;
        if (as_bool(logical_gt(n,1))) {
            current_statement_begin__ = 36;
            for (int i = 2; i <= n; ++i) {
                current_statement_begin__ = 37;
                stan::model::assign(x, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::model::deep_copy((get_base1(x,(i - 1),"x",1) + ((get_base1(ceoss,(i - 1),"ceoss",1) - get_base1(x,(i - 1),"x",1)) * r))), 
                            "assigning variable x");
            }
        }
        current_statement_begin__ = 39;
        return stan::math::promote_scalar<fun_return_scalar_t__>(x);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct deltaX_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& uos,
           const T1__& k,
           const T2__& x_prev, std::ostream* pstream__) const {
        return deltaX(uos, k, x_prev, pstream__);
    }
};

template <typename T0__, typename T1__, typename T3__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T3__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type, Eigen::Dynamic,1>
experimentFEV1(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& o3,
                   const Eigen::Matrix<T1__, Eigen::Dynamic,1>& ve,
                   const std::vector<int>& t_stop,
                   const T3__& dos,
                   const T4__& k,
                   const T5__& a, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T3__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 44;
        int m(0);
        (void) m;  // dummy to suppress unused var warning

        stan::math::fill(m, std::numeric_limits<int>::min());
        stan::math::assign(m,get_base1(dims(o3),1,"dims(o3)",1));
        current_statement_begin__ = 45;
        int n(0);
        (void) n;  // dummy to suppress unused var warning

        stan::math::fill(n, std::numeric_limits<int>::min());
        stan::math::assign(n,max(t_stop));
        current_statement_begin__ = 46;
        validate_non_negative_index("dFEV1", "m", m);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  dFEV1(static_cast<Eigen::VectorXd::Index>(m));
        (void) dFEV1;  // dummy to suppress unused var warning

        stan::math::initialize(dFEV1, DUMMY_VAR__);
        stan::math::fill(dFEV1,DUMMY_VAR__);
        stan::math::assign(dFEV1,rep_vector(0,m));
        current_statement_begin__ = 47;
        local_scalar_t__ x_previous;
        (void) x_previous;  // dummy to suppress unused var warning

        stan::math::initialize(x_previous, DUMMY_VAR__);
        stan::math::fill(x_previous,DUMMY_VAR__);
        stan::math::assign(x_previous,0);
        current_statement_begin__ = 48;
        local_scalar_t__ dr;
        (void) dr;  // dummy to suppress unused var warning

        stan::math::initialize(dr, DUMMY_VAR__);
        stan::math::fill(dr,DUMMY_VAR__);
        stan::math::assign(dr,0);
        current_statement_begin__ = 49;
        local_scalar_t__ FrDos;
        (void) FrDos;  // dummy to suppress unused var warning

        stan::math::initialize(FrDos, DUMMY_VAR__);
        stan::math::fill(FrDos,DUMMY_VAR__);
        current_statement_begin__ = 50;
        local_scalar_t__ FrDos_previous;
        (void) FrDos_previous;  // dummy to suppress unused var warning

        stan::math::initialize(FrDos_previous, DUMMY_VAR__);
        stan::math::fill(FrDos_previous,DUMMY_VAR__);
        stan::math::assign(FrDos_previous,0);


        current_statement_begin__ = 52;
        for (int i = 1; i <= (m - 1); ++i) {
            {
            current_statement_begin__ = 53;
            int n_t(0);
            (void) n_t;  // dummy to suppress unused var warning

            stan::math::fill(n_t, std::numeric_limits<int>::min());
            stan::math::assign(n_t,((get_base1(t_stop,(i + 1),"t_stop",1) - get_base1(t_stop,i,"t_stop",1)) + 1));
            current_statement_begin__ = 54;
            validate_non_negative_index("t", "n_t", n_t);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  t(static_cast<Eigen::VectorXd::Index>(n_t));
            (void) t;  // dummy to suppress unused var warning

            stan::math::initialize(t, DUMMY_VAR__);
            stan::math::fill(t,DUMMY_VAR__);
            stan::math::assign(t,seq(get_base1(t_stop,i,"t_stop",1),get_base1(t_stop,(i + 1),"t_stop",1), pstream__));
            current_statement_begin__ = 55;
            validate_non_negative_index("CumFrDos", "n_t", n_t);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  CumFrDos(static_cast<Eigen::VectorXd::Index>(n_t));
            (void) CumFrDos;  // dummy to suppress unused var warning

            stan::math::initialize(CumFrDos, DUMMY_VAR__);
            stan::math::fill(CumFrDos,DUMMY_VAR__);
            current_statement_begin__ = 56;
            validate_non_negative_index("uos", "n_t", n_t);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  uos(static_cast<Eigen::VectorXd::Index>(n_t));
            (void) uos;  // dummy to suppress unused var warning

            stan::math::initialize(uos, DUMMY_VAR__);
            stan::math::fill(uos,DUMMY_VAR__);
            current_statement_begin__ = 57;
            validate_non_negative_index("x", "n_t", n_t);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  x(static_cast<Eigen::VectorXd::Index>(n_t));
            (void) x;  // dummy to suppress unused var warning

            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x,DUMMY_VAR__);


            current_statement_begin__ = 58;
            stan::math::assign(dr, ((get_base1(o3,i,"o3",1) * get_base1(ve,i,"ve",1)) * 1.96));
            current_statement_begin__ = 59;
            stan::math::assign(FrDos, (dr / dos));
            current_statement_begin__ = 60;
            for (int j = 1; j <= n_t; ++j) {
                current_statement_begin__ = 61;
                stan::model::assign(CumFrDos, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (FrDos_previous + (FrDos * j)), 
                            "assigning variable CumFrDos");
            }
            current_statement_begin__ = 63;
            stan::math::assign(uos, UOS(dr,CumFrDos,dos,t, pstream__));
            current_statement_begin__ = 65;
            stan::math::assign(x, deltaX(uos,k,x_previous, pstream__));
            current_statement_begin__ = 66;
            stan::math::assign(FrDos_previous, get_base1(CumFrDos,n_t,"CumFrDos",1));
            current_statement_begin__ = 68;
            stan::math::assign(x_previous, get_base1(x,n_t,"x",1));
            current_statement_begin__ = 69;
            stan::model::assign(dFEV1, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        x_previous, 
                        "assigning variable dFEV1");
            }
        }
        current_statement_begin__ = 72;
        return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(dFEV1,a));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct experimentFEV1_functor__ {
    template <typename T0__, typename T1__, typename T3__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T3__, T4__, typename boost::math::tools::promote_args<T5__>::type>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& o3,
                   const Eigen::Matrix<T1__, Eigen::Dynamic,1>& ve,
                   const std::vector<int>& t_stop,
                   const T3__& dos,
                   const T4__& k,
                   const T5__& a, std::ostream* pstream__) const {
        return experimentFEV1(o3, ve, t_stop, dos, k, a, pstream__);
    }
};

#include <meta_header.hpp>
 class model_schelegle : public prob_grad {
private:
    int max_timepts;
    int max_n_dFEV1;
    int n_obs;
    int n_ind;
    vector<int> n_dFEV1;
    vector<int> n_timepts;
    vector<int> ind;
    vector<vector_d> Ve;
    vector<vector_d> Cm;
    vector<vector_d> Cs;
    vector<vector<int> > Time;
    vector<vector<int> > dFEV1_measure_idx;
    vector<vector_d> dFEV1;
    double k;
    double dos;
    double a;
    double sigma;
public:
    model_schelegle(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_schelegle(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_schelegle_namespace::model_schelegle";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 77;
            context__.validate_dims("data initialization", "max_timepts", "int", context__.to_vec());
            max_timepts = int(0);
            vals_i__ = context__.vals_i("max_timepts");
            pos__ = 0;
            max_timepts = vals_i__[pos__++];
            current_statement_begin__ = 78;
            context__.validate_dims("data initialization", "max_n_dFEV1", "int", context__.to_vec());
            max_n_dFEV1 = int(0);
            vals_i__ = context__.vals_i("max_n_dFEV1");
            pos__ = 0;
            max_n_dFEV1 = vals_i__[pos__++];
            current_statement_begin__ = 79;
            context__.validate_dims("data initialization", "n_obs", "int", context__.to_vec());
            n_obs = int(0);
            vals_i__ = context__.vals_i("n_obs");
            pos__ = 0;
            n_obs = vals_i__[pos__++];
            current_statement_begin__ = 80;
            context__.validate_dims("data initialization", "n_ind", "int", context__.to_vec());
            n_ind = int(0);
            vals_i__ = context__.vals_i("n_ind");
            pos__ = 0;
            n_ind = vals_i__[pos__++];
            current_statement_begin__ = 81;
            validate_non_negative_index("n_dFEV1", "n_obs", n_obs);
            context__.validate_dims("data initialization", "n_dFEV1", "int", context__.to_vec(n_obs));
            validate_non_negative_index("n_dFEV1", "n_obs", n_obs);
            n_dFEV1 = std::vector<int>(n_obs,int(0));
            vals_i__ = context__.vals_i("n_dFEV1");
            pos__ = 0;
            size_t n_dFEV1_limit_0__ = n_obs;
            for (size_t i_0__ = 0; i_0__ < n_dFEV1_limit_0__; ++i_0__) {
                n_dFEV1[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 82;
            validate_non_negative_index("n_timepts", "n_obs", n_obs);
            context__.validate_dims("data initialization", "n_timepts", "int", context__.to_vec(n_obs));
            validate_non_negative_index("n_timepts", "n_obs", n_obs);
            n_timepts = std::vector<int>(n_obs,int(0));
            vals_i__ = context__.vals_i("n_timepts");
            pos__ = 0;
            size_t n_timepts_limit_0__ = n_obs;
            for (size_t i_0__ = 0; i_0__ < n_timepts_limit_0__; ++i_0__) {
                n_timepts[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 83;
            validate_non_negative_index("ind", "n_obs", n_obs);
            context__.validate_dims("data initialization", "ind", "int", context__.to_vec(n_obs));
            validate_non_negative_index("ind", "n_obs", n_obs);
            ind = std::vector<int>(n_obs,int(0));
            vals_i__ = context__.vals_i("ind");
            pos__ = 0;
            size_t ind_limit_0__ = n_obs;
            for (size_t i_0__ = 0; i_0__ < ind_limit_0__; ++i_0__) {
                ind[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 85;
            validate_non_negative_index("Ve", "n_obs", n_obs);
            validate_non_negative_index("Ve", "max_timepts", max_timepts);
            context__.validate_dims("data initialization", "Ve", "vector_d", context__.to_vec(n_obs,max_timepts));
            validate_non_negative_index("Ve", "n_obs", n_obs);
            validate_non_negative_index("Ve", "max_timepts", max_timepts);
            Ve = std::vector<vector_d>(n_obs,vector_d(static_cast<Eigen::VectorXd::Index>(max_timepts)));
            vals_r__ = context__.vals_r("Ve");
            pos__ = 0;
            size_t Ve_i_vec_lim__ = max_timepts;
            for (size_t i_vec__ = 0; i_vec__ < Ve_i_vec_lim__; ++i_vec__) {
                size_t Ve_limit_0__ = n_obs;
                for (size_t i_0__ = 0; i_0__ < Ve_limit_0__; ++i_0__) {
                    Ve[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 86;
            validate_non_negative_index("Cm", "n_obs", n_obs);
            validate_non_negative_index("Cm", "max_timepts", max_timepts);
            context__.validate_dims("data initialization", "Cm", "vector_d", context__.to_vec(n_obs,max_timepts));
            validate_non_negative_index("Cm", "n_obs", n_obs);
            validate_non_negative_index("Cm", "max_timepts", max_timepts);
            Cm = std::vector<vector_d>(n_obs,vector_d(static_cast<Eigen::VectorXd::Index>(max_timepts)));
            vals_r__ = context__.vals_r("Cm");
            pos__ = 0;
            size_t Cm_i_vec_lim__ = max_timepts;
            for (size_t i_vec__ = 0; i_vec__ < Cm_i_vec_lim__; ++i_vec__) {
                size_t Cm_limit_0__ = n_obs;
                for (size_t i_0__ = 0; i_0__ < Cm_limit_0__; ++i_0__) {
                    Cm[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 87;
            validate_non_negative_index("Cs", "n_obs", n_obs);
            validate_non_negative_index("Cs", "max_timepts", max_timepts);
            context__.validate_dims("data initialization", "Cs", "vector_d", context__.to_vec(n_obs,max_timepts));
            validate_non_negative_index("Cs", "n_obs", n_obs);
            validate_non_negative_index("Cs", "max_timepts", max_timepts);
            Cs = std::vector<vector_d>(n_obs,vector_d(static_cast<Eigen::VectorXd::Index>(max_timepts)));
            vals_r__ = context__.vals_r("Cs");
            pos__ = 0;
            size_t Cs_i_vec_lim__ = max_timepts;
            for (size_t i_vec__ = 0; i_vec__ < Cs_i_vec_lim__; ++i_vec__) {
                size_t Cs_limit_0__ = n_obs;
                for (size_t i_0__ = 0; i_0__ < Cs_limit_0__; ++i_0__) {
                    Cs[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 88;
            validate_non_negative_index("Time", "n_obs", n_obs);
            validate_non_negative_index("Time", "max_timepts", max_timepts);
            context__.validate_dims("data initialization", "Time", "int", context__.to_vec(n_obs,max_timepts));
            validate_non_negative_index("Time", "n_obs", n_obs);
            validate_non_negative_index("Time", "max_timepts", max_timepts);
            Time = std::vector<std::vector<int> >(n_obs,std::vector<int>(max_timepts,int(0)));
            vals_i__ = context__.vals_i("Time");
            pos__ = 0;
            size_t Time_limit_1__ = max_timepts;
            for (size_t i_1__ = 0; i_1__ < Time_limit_1__; ++i_1__) {
                size_t Time_limit_0__ = n_obs;
                for (size_t i_0__ = 0; i_0__ < Time_limit_0__; ++i_0__) {
                    Time[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 89;
            validate_non_negative_index("dFEV1_measure_idx", "n_obs", n_obs);
            validate_non_negative_index("dFEV1_measure_idx", "max_n_dFEV1", max_n_dFEV1);
            context__.validate_dims("data initialization", "dFEV1_measure_idx", "int", context__.to_vec(n_obs,max_n_dFEV1));
            validate_non_negative_index("dFEV1_measure_idx", "n_obs", n_obs);
            validate_non_negative_index("dFEV1_measure_idx", "max_n_dFEV1", max_n_dFEV1);
            dFEV1_measure_idx = std::vector<std::vector<int> >(n_obs,std::vector<int>(max_n_dFEV1,int(0)));
            vals_i__ = context__.vals_i("dFEV1_measure_idx");
            pos__ = 0;
            size_t dFEV1_measure_idx_limit_1__ = max_n_dFEV1;
            for (size_t i_1__ = 0; i_1__ < dFEV1_measure_idx_limit_1__; ++i_1__) {
                size_t dFEV1_measure_idx_limit_0__ = n_obs;
                for (size_t i_0__ = 0; i_0__ < dFEV1_measure_idx_limit_0__; ++i_0__) {
                    dFEV1_measure_idx[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 90;
            validate_non_negative_index("dFEV1", "n_obs", n_obs);
            validate_non_negative_index("dFEV1", "max_n_dFEV1", max_n_dFEV1);
            context__.validate_dims("data initialization", "dFEV1", "vector_d", context__.to_vec(n_obs,max_n_dFEV1));
            validate_non_negative_index("dFEV1", "n_obs", n_obs);
            validate_non_negative_index("dFEV1", "max_n_dFEV1", max_n_dFEV1);
            dFEV1 = std::vector<vector_d>(n_obs,vector_d(static_cast<Eigen::VectorXd::Index>(max_n_dFEV1)));
            vals_r__ = context__.vals_r("dFEV1");
            pos__ = 0;
            size_t dFEV1_i_vec_lim__ = max_n_dFEV1;
            for (size_t i_vec__ = 0; i_vec__ < dFEV1_i_vec_lim__; ++i_vec__) {
                size_t dFEV1_limit_0__ = n_obs;
                for (size_t i_0__ = 0; i_0__ < dFEV1_limit_0__; ++i_0__) {
                    dFEV1[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 91;
            context__.validate_dims("data initialization", "k", "double", context__.to_vec());
            k = double(0);
            vals_r__ = context__.vals_r("k");
            pos__ = 0;
            k = vals_r__[pos__++];
            current_statement_begin__ = 92;
            context__.validate_dims("data initialization", "dos", "double", context__.to_vec());
            dos = double(0);
            vals_r__ = context__.vals_r("dos");
            pos__ = 0;
            dos = vals_r__[pos__++];
            current_statement_begin__ = 93;
            context__.validate_dims("data initialization", "a", "double", context__.to_vec());
            a = double(0);
            vals_r__ = context__.vals_r("a");
            pos__ = 0;
            a = vals_r__[pos__++];
            current_statement_begin__ = 94;
            context__.validate_dims("data initialization", "sigma", "double", context__.to_vec());
            sigma = double(0);
            vals_r__ = context__.vals_r("sigma");
            pos__ = 0;
            sigma = vals_r__[pos__++];

            // validate, data variables
            current_statement_begin__ = 77;
            current_statement_begin__ = 78;
            current_statement_begin__ = 79;
            current_statement_begin__ = 80;
            current_statement_begin__ = 81;
            current_statement_begin__ = 82;
            current_statement_begin__ = 83;
            current_statement_begin__ = 85;
            current_statement_begin__ = 86;
            current_statement_begin__ = 87;
            current_statement_begin__ = 88;
            current_statement_begin__ = 89;
            current_statement_begin__ = 90;
            current_statement_begin__ = 91;
            current_statement_begin__ = 92;
            current_statement_begin__ = 93;
            current_statement_begin__ = 94;
            check_greater_or_equal(function__,"sigma",sigma,0);
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_schelegle() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body

            current_statement_begin__ = 114;
            for (int n = 1; n <= n_obs; ++n) {
                {
                current_statement_begin__ = 115;
                int idx(0);
                (void) idx;  // dummy to suppress unused var warning

                stan::math::fill(idx, std::numeric_limits<int>::min());
                stan::math::assign(idx,get_base1(n_timepts,n,"n_timepts",1));
                current_statement_begin__ = 116;
                int n_meas(0);
                (void) n_meas;  // dummy to suppress unused var warning

                stan::math::fill(n_meas, std::numeric_limits<int>::min());
                stan::math::assign(n_meas,max(stan::model::rvalue(get_base1(Time,n,"Time",1), stan::model::cons_list(stan::model::index_max(idx), stan::model::nil_index_list()), "Time[n]")));
                current_statement_begin__ = 117;
                validate_non_negative_index("pred_fev1", "idx", idx);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  pred_fev1(static_cast<Eigen::VectorXd::Index>(idx));
                (void) pred_fev1;  // dummy to suppress unused var warning

                stan::math::initialize(pred_fev1, DUMMY_VAR__);
                stan::math::fill(pred_fev1,DUMMY_VAR__);
                stan::math::assign(pred_fev1,experimentFEV1(stan::model::rvalue(get_base1(Cm,n,"Cm",1), stan::model::cons_list(stan::model::index_max(idx), stan::model::nil_index_list()), "Cm[n]"),stan::model::rvalue(get_base1(Ve,n,"Ve",1), stan::model::cons_list(stan::model::index_max(idx), stan::model::nil_index_list()), "Ve[n]"),stan::model::rvalue(get_base1(Time,n,"Time",1), stan::model::cons_list(stan::model::index_max(idx), stan::model::nil_index_list()), "Time[n]"),dos,k,a, pstream__));
                current_statement_begin__ = 121;
                validate_non_negative_index("comp_idx", "get_base1(n_dFEV1,n,\"n_dFEV1\",1)", get_base1(n_dFEV1,n,"n_dFEV1",1));
                vector<int> comp_idx(get_base1(n_dFEV1,n,"n_dFEV1",1), 0);
                stan::math::fill(comp_idx, std::numeric_limits<int>::min());
                stan::math::assign(comp_idx,stan::model::rvalue(get_base1(dFEV1_measure_idx,n,"dFEV1_measure_idx",1), stan::model::cons_list(stan::model::index_max(get_base1(n_dFEV1,n,"n_dFEV1",1)), stan::model::nil_index_list()), "dFEV1_measure_idx[n]"));


                current_statement_begin__ = 125;
                lp_accum__.add(normal_log<propto__>(stan::model::rvalue(get_base1(dFEV1,n,"dFEV1",1), stan::model::cons_list(stan::model::index_max(get_base1(n_dFEV1,n,"n_dFEV1",1)), stan::model::nil_index_list()), "dFEV1[n]"), multiply(stan::model::rvalue(pred_fev1, stan::model::cons_list(stan::model::index_multi(comp_idx), stan::model::nil_index_list()), "pred_fev1"),-(100)), sigma));
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("log_lik");
        names__.push_back("aic");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_schelegle_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters
            if (include_tparams__) {
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 132;
            local_scalar_t__ log_lik;
            (void) log_lik;  // dummy to suppress unused var warning

            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik,DUMMY_VAR__);
            stan::math::assign(log_lik,0);
            current_statement_begin__ = 133;
            local_scalar_t__ aic;
            (void) aic;  // dummy to suppress unused var warning

            stan::math::initialize(aic, DUMMY_VAR__);
            stan::math::fill(aic,DUMMY_VAR__);


            current_statement_begin__ = 134;
            for (int n = 1; n <= n_obs; ++n) {
                {
                current_statement_begin__ = 135;
                int idx(0);
                (void) idx;  // dummy to suppress unused var warning

                stan::math::fill(idx, std::numeric_limits<int>::min());
                stan::math::assign(idx,get_base1(n_timepts,n,"n_timepts",1));
                current_statement_begin__ = 136;
                validate_non_negative_index("pred_fev1", "idx", idx);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  pred_fev1(static_cast<Eigen::VectorXd::Index>(idx));
                (void) pred_fev1;  // dummy to suppress unused var warning

                stan::math::initialize(pred_fev1, DUMMY_VAR__);
                stan::math::fill(pred_fev1,DUMMY_VAR__);
                stan::math::assign(pred_fev1,experimentFEV1(stan::model::rvalue(get_base1(Cm,n,"Cm",1), stan::model::cons_list(stan::model::index_max(idx), stan::model::nil_index_list()), "Cm[n]"),stan::model::rvalue(get_base1(Ve,n,"Ve",1), stan::model::cons_list(stan::model::index_max(idx), stan::model::nil_index_list()), "Ve[n]"),stan::model::rvalue(get_base1(Time,n,"Time",1), stan::model::cons_list(stan::model::index_max(idx), stan::model::nil_index_list()), "Time[n]"),dos,k,a, pstream__));
                current_statement_begin__ = 140;
                validate_non_negative_index("comp_idx", "get_base1(n_dFEV1,n,\"n_dFEV1\",1)", get_base1(n_dFEV1,n,"n_dFEV1",1));
                vector<int> comp_idx(get_base1(n_dFEV1,n,"n_dFEV1",1), 0);
                stan::math::fill(comp_idx, std::numeric_limits<int>::min());
                stan::math::assign(comp_idx,stan::model::rvalue(get_base1(dFEV1_measure_idx,n,"dFEV1_measure_idx",1), stan::model::cons_list(stan::model::index_max(get_base1(n_dFEV1,n,"n_dFEV1",1)), stan::model::nil_index_list()), "dFEV1_measure_idx[n]"));


                current_statement_begin__ = 143;
                stan::math::assign(log_lik, (log_lik + normal_log(stan::model::rvalue(get_base1(dFEV1,n,"dFEV1",1), stan::model::cons_list(stan::model::index_max(get_base1(n_dFEV1,n,"n_dFEV1",1)), stan::model::nil_index_list()), "dFEV1[n]"),stan::model::rvalue(pred_fev1, stan::model::cons_list(stan::model::index_multi(comp_idx), stan::model::nil_index_list()), "pred_fev1"),sigma)));
                }
            }
            current_statement_begin__ = 145;
            stan::math::assign(aic, ((2 * 3) - (2 * log_lik)));

            // validate generated quantities
            current_statement_begin__ = 132;
            current_statement_begin__ = 133;

            // write generated quantities
        vars__.push_back(log_lik);
        vars__.push_back(aic);

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_schelegle";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_lik";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "aic";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_lik";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "aic";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

}

typedef model_schelegle_namespace::model_schelegle stan_model;


#endif
