/*
    OzoneExposure is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OzoneExposure is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with OzoneExposure.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.1

#include <stan/model/model_header.hpp>

namespace model_mcdonnel_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_mcdonnel");
    reader.add_event(148, 146, "end", "model_mcdonnel");
    return reader;
}

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type, Eigen::Dynamic,1>
get_XB5(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& Cm,
            const Eigen::Matrix<T1__, Eigen::Dynamic,1>& Cs,
            const T2__& Vs,
            const Eigen::Matrix<T3__, Eigen::Dynamic,1>& Ve,
            const T4__& BSA,
            const Eigen::Matrix<T5__, Eigen::Dynamic,1>& Time,
            const T6__& B5,
            const T7__& B6, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 19;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,get_base1(dims(Cm),1,"dims(Cm)",1));
        current_statement_begin__ = 20;
        validate_non_negative_index("XB5", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  XB5(static_cast<Eigen::VectorXd::Index>(N));
        (void) XB5;  // dummy to suppress unused var warning

        stan::math::initialize(XB5, DUMMY_VAR__);
        stan::math::fill(XB5,DUMMY_VAR__);
        stan::math::assign(XB5,rep_vector(0.0,N));
        current_statement_begin__ = 21;
        local_scalar_t__ Vm;
        (void) Vm;  // dummy to suppress unused var warning

        stan::math::initialize(Vm, DUMMY_VAR__);
        stan::math::fill(Vm,DUMMY_VAR__);
        current_statement_begin__ = 22;
        local_scalar_t__ Ta;
        (void) Ta;  // dummy to suppress unused var warning

        stan::math::initialize(Ta, DUMMY_VAR__);
        stan::math::fill(Ta,DUMMY_VAR__);
        current_statement_begin__ = 23;
        local_scalar_t__ Tb;
        (void) Tb;  // dummy to suppress unused var warning

        stan::math::initialize(Tb, DUMMY_VAR__);
        stan::math::fill(Tb,DUMMY_VAR__);
        current_statement_begin__ = 24;
        local_scalar_t__ TD;
        (void) TD;  // dummy to suppress unused var warning

        stan::math::initialize(TD, DUMMY_VAR__);
        stan::math::fill(TD,DUMMY_VAR__);
        current_statement_begin__ = 25;
        local_scalar_t__ XB5_previous;
        (void) XB5_previous;  // dummy to suppress unused var warning

        stan::math::initialize(XB5_previous, DUMMY_VAR__);
        stan::math::fill(XB5_previous,DUMMY_VAR__);


        current_statement_begin__ = 27;
        for (int j = 1; j <= N; ++j) {

            current_statement_begin__ = 28;
            stan::math::assign(Vm, (pow(get_base1(Ve,j,"Ve",1),B6) / pow(BSA,B6)));
            current_statement_begin__ = 29;
            stan::math::assign(Ta, (logical_gt(j,1) ? get_base1(Time,(j - 1),"Time",1) : 0.0 ));
            current_statement_begin__ = 30;
            stan::math::assign(Tb, get_base1(Time,j,"Time",1));
            current_statement_begin__ = 31;
            stan::math::assign(TD, (Tb - Ta));
            current_statement_begin__ = 32;
            stan::math::assign(XB5_previous, (logical_gt(j,1) ? stan::math::promote_scalar<local_scalar_t__>(get_base1(XB5,(j - 1),"XB5",1)) : stan::math::promote_scalar<local_scalar_t__>(0) ));
            current_statement_begin__ = 34;
            stan::model::assign(XB5, 
                        stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                        (((((XB5_previous * stan::math::exp((-(B5) * TD))) + (((get_base1(Cm,j,"Cm",1) * Vm) * pow(B5,-(1))) * (1 - stan::math::exp((-(B5) * TD))))) + (((get_base1(Cm,j,"Cm",1) * Vs) * pow(B5,-(2))) * (((1 - (B5 * Ta)) * stan::math::exp((-(B5) * TD))) - (1 - (B5 * Tb))))) + (((get_base1(Cs,j,"Cs",1) * Vm) * pow(B5,-(2))) * (((1 - (B5 * Ta)) * stan::math::exp((-(B5) * TD))) - (1 - (B5 * Tb))))) + (((get_base1(Cs,j,"Cs",1) * Vs) * pow(B5,-(3))) * ((((-(2) + ((2 * B5) * Ta)) - (pow(B5,2) * pow(Ta,2))) * stan::math::exp((-(B5) * TD))) - ((-(2) + ((2 * B5) * Tb)) - (pow(B5,2) * pow(Tb,2)))))), 
                        "assigning variable XB5");
        }
        current_statement_begin__ = 42;
        return stan::math::promote_scalar<fun_return_scalar_t__>(XB5);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct get_XB5_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__>::type>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& Cm,
            const Eigen::Matrix<T1__, Eigen::Dynamic,1>& Cs,
            const T2__& Vs,
            const Eigen::Matrix<T3__, Eigen::Dynamic,1>& Ve,
            const T4__& BSA,
            const Eigen::Matrix<T5__, Eigen::Dynamic,1>& Time,
            const T6__& B5,
            const T7__& B6, std::ostream* pstream__) const {
        return get_XB5(Cm, Cs, Vs, Ve, BSA, Time, B5, B6, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__>::type>::type>::type, Eigen::Dynamic,1>
get_pop_median(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& XB5,
                   const T1__& age_c,
                   const T2__& BMI_c,
                   const T3__& B1,
                   const T4__& B2,
                   const T5__& B3,
                   const T6__& B4,
                   const T7__& B8,
                   const T8__& B9, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 52;
        int N(0);
        (void) N;  // dummy to suppress unused var warning

        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,get_base1(dims(XB5),1,"dims(XB5)",1));
        current_statement_begin__ = 53;
        validate_non_negative_index("XB5G", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  XB5G(static_cast<Eigen::VectorXd::Index>(N));
        (void) XB5G;  // dummy to suppress unused var warning

        stan::math::initialize(XB5G, DUMMY_VAR__);
        stan::math::fill(XB5G,DUMMY_VAR__);
        current_statement_begin__ = 54;
        local_scalar_t__ F1;
        (void) F1;  // dummy to suppress unused var warning

        stan::math::initialize(F1, DUMMY_VAR__);
        stan::math::fill(F1,DUMMY_VAR__);
        stan::math::assign(F1,((B1 + (B2 * age_c)) + (B8 * BMI_c)));
        current_statement_begin__ = 55;
        validate_non_negative_index("T1", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  T1(static_cast<Eigen::VectorXd::Index>(N));
        (void) T1;  // dummy to suppress unused var warning

        stan::math::initialize(T1, DUMMY_VAR__);
        stan::math::fill(T1,DUMMY_VAR__);
        current_statement_begin__ = 56;
        local_scalar_t__ T2;
        (void) T2;  // dummy to suppress unused var warning

        stan::math::initialize(T2, DUMMY_VAR__);
        stan::math::fill(T2,DUMMY_VAR__);
        stan::math::assign(T2,(1 + B4));
        current_statement_begin__ = 57;
        validate_non_negative_index("Median", "N", N);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  Median(static_cast<Eigen::VectorXd::Index>(N));
        (void) Median;  // dummy to suppress unused var warning

        stan::math::initialize(Median, DUMMY_VAR__);
        stan::math::fill(Median,DUMMY_VAR__);


        current_statement_begin__ = 59;
        for (int n = 1; n <= N; ++n) {
            current_statement_begin__ = 60;
            stan::model::assign(XB5G, 
                        stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                        (logical_gte(get_base1(XB5,n,"XB5",1),B9) ? stan::math::promote_scalar<local_scalar_t__>((get_base1(XB5,n,"XB5",1) - B9)) : stan::math::promote_scalar<local_scalar_t__>(0) ), 
                        "assigning variable XB5G");
        }
        current_statement_begin__ = 61;
        stan::math::assign(T1, add(1,multiply(B4,stan::math::exp(multiply(-(B3),XB5G)))));
        current_statement_begin__ = 62;
        for (int n = 1; n <= N; ++n) {
            current_statement_begin__ = 63;
            stan::model::assign(Median, 
                        stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                        (F1 * ((1 / get_base1(T1,n,"T1",1)) - (1 / T2))), 
                        "assigning variable Median");
        }
        current_statement_begin__ = 65;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Median);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct get_pop_median_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T8__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, typename boost::math::tools::promote_args<T8__>::type>::type>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& XB5,
                   const T1__& age_c,
                   const T2__& BMI_c,
                   const T3__& B1,
                   const T4__& B2,
                   const T5__& B3,
                   const T6__& B4,
                   const T7__& B8,
                   const T8__& B9, std::ostream* pstream__) const {
        return get_pop_median(XB5, age_c, BMI_c, B1, B2, B3, B4, B8, B9, pstream__);
    }
};

#include <meta_header.hpp>
 class model_mcdonnel : public prob_grad {
private:
    int max_timepts;
    int max_n_dFEV1;
    int n_obs;
    int n_ind;
    vector<int> n_dFEV1;
    vector<int> n_timepts;
    vector<int> ind;
    vector_d age;
    vector_d BMI;
    vector_d BSA;
    vector<vector_d> Ve;
    vector<vector_d> Cm;
    vector<vector_d> Cs;
    vector<vector_d> Time;
    vector<vector<int> > dFEV1_measure_idx;
    vector<vector_d> dFEV1;
    double sigma_U;
    double Vs;
    vector_d age_c;
    vector_d BMI_c;
public:
    model_mcdonnel(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_mcdonnel(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_mcdonnel_namespace::model_mcdonnel";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 70;
            context__.validate_dims("data initialization", "max_timepts", "int", context__.to_vec());
            max_timepts = int(0);
            vals_i__ = context__.vals_i("max_timepts");
            pos__ = 0;
            max_timepts = vals_i__[pos__++];
            current_statement_begin__ = 71;
            context__.validate_dims("data initialization", "max_n_dFEV1", "int", context__.to_vec());
            max_n_dFEV1 = int(0);
            vals_i__ = context__.vals_i("max_n_dFEV1");
            pos__ = 0;
            max_n_dFEV1 = vals_i__[pos__++];
            current_statement_begin__ = 72;
            context__.validate_dims("data initialization", "n_obs", "int", context__.to_vec());
            n_obs = int(0);
            vals_i__ = context__.vals_i("n_obs");
            pos__ = 0;
            n_obs = vals_i__[pos__++];
            current_statement_begin__ = 73;
            context__.validate_dims("data initialization", "n_ind", "int", context__.to_vec());
            n_ind = int(0);
            vals_i__ = context__.vals_i("n_ind");
            pos__ = 0;
            n_ind = vals_i__[pos__++];
            current_statement_begin__ = 74;
            validate_non_negative_index("n_dFEV1", "n_obs", n_obs);
            context__.validate_dims("data initialization", "n_dFEV1", "int", context__.to_vec(n_obs));
            validate_non_negative_index("n_dFEV1", "n_obs", n_obs);
            n_dFEV1 = std::vector<int>(n_obs,int(0));
            vals_i__ = context__.vals_i("n_dFEV1");
            pos__ = 0;
            size_t n_dFEV1_limit_0__ = n_obs;
            for (size_t i_0__ = 0; i_0__ < n_dFEV1_limit_0__; ++i_0__) {
                n_dFEV1[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 75;
            validate_non_negative_index("n_timepts", "n_obs", n_obs);
            context__.validate_dims("data initialization", "n_timepts", "int", context__.to_vec(n_obs));
            validate_non_negative_index("n_timepts", "n_obs", n_obs);
            n_timepts = std::vector<int>(n_obs,int(0));
            vals_i__ = context__.vals_i("n_timepts");
            pos__ = 0;
            size_t n_timepts_limit_0__ = n_obs;
            for (size_t i_0__ = 0; i_0__ < n_timepts_limit_0__; ++i_0__) {
                n_timepts[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 76;
            validate_non_negative_index("ind", "n_obs", n_obs);
            context__.validate_dims("data initialization", "ind", "int", context__.to_vec(n_obs));
            validate_non_negative_index("ind", "n_obs", n_obs);
            ind = std::vector<int>(n_obs,int(0));
            vals_i__ = context__.vals_i("ind");
            pos__ = 0;
            size_t ind_limit_0__ = n_obs;
            for (size_t i_0__ = 0; i_0__ < ind_limit_0__; ++i_0__) {
                ind[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 77;
            validate_non_negative_index("age", "n_obs", n_obs);
            context__.validate_dims("data initialization", "age", "vector_d", context__.to_vec(n_obs));
            validate_non_negative_index("age", "n_obs", n_obs);
            age = vector_d(static_cast<Eigen::VectorXd::Index>(n_obs));
            vals_r__ = context__.vals_r("age");
            pos__ = 0;
            size_t age_i_vec_lim__ = n_obs;
            for (size_t i_vec__ = 0; i_vec__ < age_i_vec_lim__; ++i_vec__) {
                age[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 78;
            validate_non_negative_index("BMI", "n_obs", n_obs);
            context__.validate_dims("data initialization", "BMI", "vector_d", context__.to_vec(n_obs));
            validate_non_negative_index("BMI", "n_obs", n_obs);
            BMI = vector_d(static_cast<Eigen::VectorXd::Index>(n_obs));
            vals_r__ = context__.vals_r("BMI");
            pos__ = 0;
            size_t BMI_i_vec_lim__ = n_obs;
            for (size_t i_vec__ = 0; i_vec__ < BMI_i_vec_lim__; ++i_vec__) {
                BMI[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 79;
            validate_non_negative_index("BSA", "n_obs", n_obs);
            context__.validate_dims("data initialization", "BSA", "vector_d", context__.to_vec(n_obs));
            validate_non_negative_index("BSA", "n_obs", n_obs);
            BSA = vector_d(static_cast<Eigen::VectorXd::Index>(n_obs));
            vals_r__ = context__.vals_r("BSA");
            pos__ = 0;
            size_t BSA_i_vec_lim__ = n_obs;
            for (size_t i_vec__ = 0; i_vec__ < BSA_i_vec_lim__; ++i_vec__) {
                BSA[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 81;
            validate_non_negative_index("Ve", "n_obs", n_obs);
            validate_non_negative_index("Ve", "max_timepts", max_timepts);
            context__.validate_dims("data initialization", "Ve", "vector_d", context__.to_vec(n_obs,max_timepts));
            validate_non_negative_index("Ve", "n_obs", n_obs);
            validate_non_negative_index("Ve", "max_timepts", max_timepts);
            Ve = std::vector<vector_d>(n_obs,vector_d(static_cast<Eigen::VectorXd::Index>(max_timepts)));
            vals_r__ = context__.vals_r("Ve");
            pos__ = 0;
            size_t Ve_i_vec_lim__ = max_timepts;
            for (size_t i_vec__ = 0; i_vec__ < Ve_i_vec_lim__; ++i_vec__) {
                size_t Ve_limit_0__ = n_obs;
                for (size_t i_0__ = 0; i_0__ < Ve_limit_0__; ++i_0__) {
                    Ve[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 82;
            validate_non_negative_index("Cm", "n_obs", n_obs);
            validate_non_negative_index("Cm", "max_timepts", max_timepts);
            context__.validate_dims("data initialization", "Cm", "vector_d", context__.to_vec(n_obs,max_timepts));
            validate_non_negative_index("Cm", "n_obs", n_obs);
            validate_non_negative_index("Cm", "max_timepts", max_timepts);
            Cm = std::vector<vector_d>(n_obs,vector_d(static_cast<Eigen::VectorXd::Index>(max_timepts)));
            vals_r__ = context__.vals_r("Cm");
            pos__ = 0;
            size_t Cm_i_vec_lim__ = max_timepts;
            for (size_t i_vec__ = 0; i_vec__ < Cm_i_vec_lim__; ++i_vec__) {
                size_t Cm_limit_0__ = n_obs;
                for (size_t i_0__ = 0; i_0__ < Cm_limit_0__; ++i_0__) {
                    Cm[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 83;
            validate_non_negative_index("Cs", "n_obs", n_obs);
            validate_non_negative_index("Cs", "max_timepts", max_timepts);
            context__.validate_dims("data initialization", "Cs", "vector_d", context__.to_vec(n_obs,max_timepts));
            validate_non_negative_index("Cs", "n_obs", n_obs);
            validate_non_negative_index("Cs", "max_timepts", max_timepts);
            Cs = std::vector<vector_d>(n_obs,vector_d(static_cast<Eigen::VectorXd::Index>(max_timepts)));
            vals_r__ = context__.vals_r("Cs");
            pos__ = 0;
            size_t Cs_i_vec_lim__ = max_timepts;
            for (size_t i_vec__ = 0; i_vec__ < Cs_i_vec_lim__; ++i_vec__) {
                size_t Cs_limit_0__ = n_obs;
                for (size_t i_0__ = 0; i_0__ < Cs_limit_0__; ++i_0__) {
                    Cs[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 84;
            validate_non_negative_index("Time", "n_obs", n_obs);
            validate_non_negative_index("Time", "max_timepts", max_timepts);
            context__.validate_dims("data initialization", "Time", "vector_d", context__.to_vec(n_obs,max_timepts));
            validate_non_negative_index("Time", "n_obs", n_obs);
            validate_non_negative_index("Time", "max_timepts", max_timepts);
            Time = std::vector<vector_d>(n_obs,vector_d(static_cast<Eigen::VectorXd::Index>(max_timepts)));
            vals_r__ = context__.vals_r("Time");
            pos__ = 0;
            size_t Time_i_vec_lim__ = max_timepts;
            for (size_t i_vec__ = 0; i_vec__ < Time_i_vec_lim__; ++i_vec__) {
                size_t Time_limit_0__ = n_obs;
                for (size_t i_0__ = 0; i_0__ < Time_limit_0__; ++i_0__) {
                    Time[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 85;
            validate_non_negative_index("dFEV1_measure_idx", "n_obs", n_obs);
            validate_non_negative_index("dFEV1_measure_idx", "max_n_dFEV1", max_n_dFEV1);
            context__.validate_dims("data initialization", "dFEV1_measure_idx", "int", context__.to_vec(n_obs,max_n_dFEV1));
            validate_non_negative_index("dFEV1_measure_idx", "n_obs", n_obs);
            validate_non_negative_index("dFEV1_measure_idx", "max_n_dFEV1", max_n_dFEV1);
            dFEV1_measure_idx = std::vector<std::vector<int> >(n_obs,std::vector<int>(max_n_dFEV1,int(0)));
            vals_i__ = context__.vals_i("dFEV1_measure_idx");
            pos__ = 0;
            size_t dFEV1_measure_idx_limit_1__ = max_n_dFEV1;
            for (size_t i_1__ = 0; i_1__ < dFEV1_measure_idx_limit_1__; ++i_1__) {
                size_t dFEV1_measure_idx_limit_0__ = n_obs;
                for (size_t i_0__ = 0; i_0__ < dFEV1_measure_idx_limit_0__; ++i_0__) {
                    dFEV1_measure_idx[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 86;
            validate_non_negative_index("dFEV1", "n_obs", n_obs);
            validate_non_negative_index("dFEV1", "max_n_dFEV1", max_n_dFEV1);
            context__.validate_dims("data initialization", "dFEV1", "vector_d", context__.to_vec(n_obs,max_n_dFEV1));
            validate_non_negative_index("dFEV1", "n_obs", n_obs);
            validate_non_negative_index("dFEV1", "max_n_dFEV1", max_n_dFEV1);
            dFEV1 = std::vector<vector_d>(n_obs,vector_d(static_cast<Eigen::VectorXd::Index>(max_n_dFEV1)));
            vals_r__ = context__.vals_r("dFEV1");
            pos__ = 0;
            size_t dFEV1_i_vec_lim__ = max_n_dFEV1;
            for (size_t i_vec__ = 0; i_vec__ < dFEV1_i_vec_lim__; ++i_vec__) {
                size_t dFEV1_limit_0__ = n_obs;
                for (size_t i_0__ = 0; i_0__ < dFEV1_limit_0__; ++i_0__) {
                    dFEV1[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 87;
            context__.validate_dims("data initialization", "sigma_U", "double", context__.to_vec());
            sigma_U = double(0);
            vals_r__ = context__.vals_r("sigma_U");
            pos__ = 0;
            sigma_U = vals_r__[pos__++];

            // validate, data variables
            current_statement_begin__ = 70;
            current_statement_begin__ = 71;
            current_statement_begin__ = 72;
            current_statement_begin__ = 73;
            current_statement_begin__ = 74;
            current_statement_begin__ = 75;
            current_statement_begin__ = 76;
            current_statement_begin__ = 77;
            current_statement_begin__ = 78;
            current_statement_begin__ = 79;
            current_statement_begin__ = 81;
            current_statement_begin__ = 82;
            current_statement_begin__ = 83;
            current_statement_begin__ = 84;
            current_statement_begin__ = 85;
            current_statement_begin__ = 86;
            current_statement_begin__ = 87;
            check_greater_or_equal(function__,"sigma_U",sigma_U,0);
            // initialize data variables
            current_statement_begin__ = 92;
            Vs = double(0);
            stan::math::fill(Vs,DUMMY_VAR__);
            stan::math::assign(Vs,0);
            current_statement_begin__ = 93;
            validate_non_negative_index("age_c", "n_obs", n_obs);
            age_c = vector_d(static_cast<Eigen::VectorXd::Index>(n_obs));
            stan::math::fill(age_c,DUMMY_VAR__);
            stan::math::assign(age_c,subtract(age,23.800000000000001));
            current_statement_begin__ = 94;
            validate_non_negative_index("BMI_c", "n_obs", n_obs);
            BMI_c = vector_d(static_cast<Eigen::VectorXd::Index>(n_obs));
            stan::math::fill(BMI_c,DUMMY_VAR__);
            stan::math::assign(BMI_c,subtract(BMI,23.100000000000001));


            // validate transformed data
            current_statement_begin__ = 92;
            current_statement_begin__ = 93;
            current_statement_begin__ = 94;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 99;
            validate_non_negative_index("B", "9", 9);
            num_params_r__ += 9;
            current_statement_begin__ = 100;
            validate_non_negative_index("U", "n_ind", n_ind);
            num_params_r__ += n_ind;
            current_statement_begin__ = 101;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_mcdonnel() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("B")))
            throw std::runtime_error("variable B missing");
        vals_r__ = context__.vals_r("B");
        pos__ = 0U;
        validate_non_negative_index("B", "9", 9);
        context__.validate_dims("initialization", "B", "vector_d", context__.to_vec(9));
        vector_d B(static_cast<Eigen::VectorXd::Index>(9));
        for (int j1__ = 0U; j1__ < 9; ++j1__)
            B(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(B);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable B: ") + e.what());
        }

        if (!(context__.contains_r("U")))
            throw std::runtime_error("variable U missing");
        vals_r__ = context__.vals_r("U");
        pos__ = 0U;
        validate_non_negative_index("U", "n_ind", n_ind);
        context__.validate_dims("initialization", "U", "vector_d", context__.to_vec(n_ind));
        vector_d U(static_cast<Eigen::VectorXd::Index>(n_ind));
        for (int j1__ = 0U; j1__ < n_ind; ++j1__)
            U(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(U);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable U: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  B;
            (void) B;  // dummy to suppress unused var warning
            if (jacobian__)
                B = in__.vector_constrain(9,lp__);
            else
                B = in__.vector_constrain(9);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  U;
            (void) U;  // dummy to suppress unused var warning
            if (jacobian__)
                U = in__.vector_constrain(n_ind,lp__);
            else
                U = in__.vector_constrain(n_ind);

            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_constrain(lp__);
            else
                sigma = in__.scalar_constrain();


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body

            current_statement_begin__ = 106;
            lp_accum__.add(normal_log<propto__>(U, 0, sigma_U));
            current_statement_begin__ = 107;
            lp_accum__.add(normal_log<propto__>(B, 0, 100));
            current_statement_begin__ = 109;
            for (int n = 1; n <= n_obs; ++n) {
                {
                current_statement_begin__ = 110;
                int idx(0);
                (void) idx;  // dummy to suppress unused var warning

                stan::math::fill(idx, std::numeric_limits<int>::min());
                stan::math::assign(idx,get_base1(n_timepts,n,"n_timepts",1));
                current_statement_begin__ = 111;
                validate_non_negative_index("XB5", "idx", idx);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  XB5(static_cast<Eigen::VectorXd::Index>(idx));
                (void) XB5;  // dummy to suppress unused var warning

                stan::math::initialize(XB5, DUMMY_VAR__);
                stan::math::fill(XB5,DUMMY_VAR__);
                stan::math::assign(XB5,get_XB5(stan::model::rvalue(get_base1(Cm,n,"Cm",1), stan::model::cons_list(stan::model::index_max(idx), stan::model::nil_index_list()), "Cm[n]"),stan::model::rvalue(get_base1(Cs,n,"Cs",1), stan::model::cons_list(stan::model::index_max(idx), stan::model::nil_index_list()), "Cs[n]"),Vs,stan::model::rvalue(get_base1(Ve,n,"Ve",1), stan::model::cons_list(stan::model::index_max(idx), stan::model::nil_index_list()), "Ve[n]"),get_base1(BSA,n,"BSA",1),stan::model::rvalue(get_base1(Time,n,"Time",1), stan::model::cons_list(stan::model::index_max(idx), stan::model::nil_index_list()), "Time[n]"),get_base1(B,5,"B",1),get_base1(B,6,"B",1), pstream__));
                current_statement_begin__ = 115;
                validate_non_negative_index("med", "idx", idx);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  med(static_cast<Eigen::VectorXd::Index>(idx));
                (void) med;  // dummy to suppress unused var warning

                stan::math::initialize(med, DUMMY_VAR__);
                stan::math::fill(med,DUMMY_VAR__);
                stan::math::assign(med,get_pop_median(XB5,get_base1(age_c,n,"age_c",1),get_base1(BMI_c,n,"BMI_c",1),get_base1(B,1,"B",1),get_base1(B,2,"B",1),get_base1(B,3,"B",1),get_base1(B,4,"B",1),get_base1(B,8,"B",1),get_base1(B,9,"B",1), pstream__));
                current_statement_begin__ = 118;
                validate_non_negative_index("comp_idx", "get_base1(n_dFEV1,n,\"n_dFEV1\",1)", get_base1(n_dFEV1,n,"n_dFEV1",1));
                vector<int> comp_idx(get_base1(n_dFEV1,n,"n_dFEV1",1), 0);
                stan::math::fill(comp_idx, std::numeric_limits<int>::min());
                stan::math::assign(comp_idx,stan::model::rvalue(get_base1(dFEV1_measure_idx,n,"dFEV1_measure_idx",1), stan::model::cons_list(stan::model::index_max(get_base1(n_dFEV1,n,"n_dFEV1",1)), stan::model::nil_index_list()), "dFEV1_measure_idx[n]"));


                current_statement_begin__ = 121;
                lp_accum__.add(normal_log<propto__>(stan::model::rvalue(get_base1(dFEV1,n,"dFEV1",1), stan::model::cons_list(stan::model::index_max(get_base1(n_dFEV1,n,"n_dFEV1",1)), stan::model::nil_index_list()), "dFEV1[n]"), multiply(stan::model::rvalue(med, stan::model::cons_list(stan::model::index_multi(comp_idx), stan::model::nil_index_list()), "med"),stan::math::exp(get_base1(U,get_base1(ind,n,"ind",1),"U",1))), sigma));
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("B");
        names__.push_back("U");
        names__.push_back("sigma");
        names__.push_back("log_lik");
        names__.push_back("aic");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(9);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_ind);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_mcdonnel_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector_d B = in__.vector_constrain(9);
        vector_d U = in__.vector_constrain(n_ind);
        double sigma = in__.scalar_constrain();
            for (int k_0__ = 0; k_0__ < 9; ++k_0__) {
            vars__.push_back(B[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < n_ind; ++k_0__) {
            vars__.push_back(U[k_0__]);
            }
        vars__.push_back(sigma);

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters
            if (include_tparams__) {
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 126;
            local_scalar_t__ log_lik;
            (void) log_lik;  // dummy to suppress unused var warning

            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik,DUMMY_VAR__);
            stan::math::assign(log_lik,0);
            current_statement_begin__ = 127;
            local_scalar_t__ aic;
            (void) aic;  // dummy to suppress unused var warning

            stan::math::initialize(aic, DUMMY_VAR__);
            stan::math::fill(aic,DUMMY_VAR__);


            current_statement_begin__ = 129;
            for (int n = 1; n <= n_obs; ++n) {
                {
                current_statement_begin__ = 130;
                int idx(0);
                (void) idx;  // dummy to suppress unused var warning

                stan::math::fill(idx, std::numeric_limits<int>::min());
                stan::math::assign(idx,get_base1(n_timepts,n,"n_timepts",1));
                current_statement_begin__ = 131;
                validate_non_negative_index("XB5", "idx", idx);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  XB5(static_cast<Eigen::VectorXd::Index>(idx));
                (void) XB5;  // dummy to suppress unused var warning

                stan::math::initialize(XB5, DUMMY_VAR__);
                stan::math::fill(XB5,DUMMY_VAR__);
                stan::math::assign(XB5,get_XB5(stan::model::rvalue(get_base1(Cm,n,"Cm",1), stan::model::cons_list(stan::model::index_max(idx), stan::model::nil_index_list()), "Cm[n]"),stan::model::rvalue(get_base1(Cs,n,"Cs",1), stan::model::cons_list(stan::model::index_max(idx), stan::model::nil_index_list()), "Cs[n]"),Vs,stan::model::rvalue(get_base1(Ve,n,"Ve",1), stan::model::cons_list(stan::model::index_max(idx), stan::model::nil_index_list()), "Ve[n]"),get_base1(BSA,n,"BSA",1),stan::model::rvalue(get_base1(Time,n,"Time",1), stan::model::cons_list(stan::model::index_max(idx), stan::model::nil_index_list()), "Time[n]"),get_base1(B,5,"B",1),get_base1(B,6,"B",1), pstream__));
                current_statement_begin__ = 135;
                validate_non_negative_index("med", "idx", idx);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  med(static_cast<Eigen::VectorXd::Index>(idx));
                (void) med;  // dummy to suppress unused var warning

                stan::math::initialize(med, DUMMY_VAR__);
                stan::math::fill(med,DUMMY_VAR__);
                stan::math::assign(med,get_pop_median(XB5,get_base1(age_c,n,"age_c",1),get_base1(BMI_c,n,"BMI_c",1),get_base1(B,1,"B",1),get_base1(B,2,"B",1),get_base1(B,3,"B",1),get_base1(B,4,"B",1),get_base1(B,8,"B",1),get_base1(B,9,"B",1), pstream__));
                current_statement_begin__ = 138;
                validate_non_negative_index("comp_idx", "get_base1(n_dFEV1,n,\"n_dFEV1\",1)", get_base1(n_dFEV1,n,"n_dFEV1",1));
                vector<int> comp_idx(get_base1(n_dFEV1,n,"n_dFEV1",1), 0);
                stan::math::fill(comp_idx, std::numeric_limits<int>::min());
                stan::math::assign(comp_idx,stan::model::rvalue(get_base1(dFEV1_measure_idx,n,"dFEV1_measure_idx",1), stan::model::cons_list(stan::model::index_max(get_base1(n_dFEV1,n,"n_dFEV1",1)), stan::model::nil_index_list()), "dFEV1_measure_idx[n]"));


                current_statement_begin__ = 141;
                stan::math::assign(log_lik, (log_lik + normal_log(stan::model::rvalue(get_base1(dFEV1,n,"dFEV1",1), stan::model::cons_list(stan::model::index_max(get_base1(n_dFEV1,n,"n_dFEV1",1)), stan::model::nil_index_list()), "dFEV1[n]"),multiply(stan::model::rvalue(med, stan::model::cons_list(stan::model::index_multi(comp_idx), stan::model::nil_index_list()), "med"),stan::math::exp(get_base1(U,get_base1(ind,n,"ind",1),"U",1))),sigma)));
                }
            }
            current_statement_begin__ = 145;
            stan::math::assign(aic, ((2 * (8 + n_ind)) - (2 * log_lik)));

            // validate generated quantities
            current_statement_begin__ = 126;
            current_statement_begin__ = 127;

            // write generated quantities
        vars__.push_back(log_lik);
        vars__.push_back(aic);

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_mcdonnel";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= 9; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "B" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_ind; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "U" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_lik";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "aic";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= 9; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "B" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n_ind; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "U" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_lik";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "aic";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

}

typedef model_mcdonnel_namespace::model_mcdonnel stan_model;


#endif
